// Generated by CoffeeScript 1.3.3
(function() {
  var NT;

  NT = window.NT || {};

  window.NT = NT;

  NT.Level = (function() {
    var moveVelocity;

    function Level(canvas, contentLoader, jsonLevel) {
      var background, g, ninja;
      this.canvas = canvas;
      this.contentLoader = contentLoader;
      g = new Graphics();
      g.beginLinearGradientFill(["#369", "#036"], [0, 1], 0, 0, 0, this.canvas.height).drawRect(0, 0, this.canvas.width, this.canvas.height).draw(this.canvas.getContext("2d"));
      background = new Shape(g);
      background.cache(0, 0, this.canvas.width, this.canvas.height);
      this.stage = new Stage(this.canvas);
      this.stage.addChild(background);
      ninja = new Bitmap(this.contentLoader.imgNinja);
      ninja.x = 320;
      ninja.y = 240;
      this.stage.addChild(ninja);
      this.loadPlatforms(jsonLevel);
      Ticker.addListener(this);
      Ticker.setFPS(60);
    }

    Level.prototype.loadPlatforms = function(jsonLevel) {
      var lastPlatform, platformDef, platformTile, x, _i, _len, _results;
      this.platforms = [];
      platformTile = new Bitmap(this.contentLoader.imgTile);
      platformTile.width = this.contentLoader.imgTile.width;
      platformTile.height = this.contentLoader.imgTile.height;
      x = 0;
      _results = [];
      for (_i = 0, _len = jsonLevel.length; _i < _len; _i++) {
        platformDef = jsonLevel[_i];
        lastPlatform = new NT.Platform(5, platformTile, x, this.canvas.height - 60);
        this.platforms.push(lastPlatform);
        _results.push(x = lastPlatform.getWidth() + 50);
      }
      return _results;
    };

    Level.prototype.startLevel = function() {
      var platform, _i, _len, _ref, _results;
      _ref = this.platforms;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        platform = _ref[_i];
        _results.push(this.stage.addChild(platform.getDisplayObject()));
      }
      return _results;
    };

    moveVelocity = -1;

    Level.prototype.tick = function() {
      var platform, _i, _len, _ref;
      _ref = this.platforms;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        platform = _ref[_i];
        if (!platform.isVisibleInCanvas(this.canvas)) {
          moveVelocity *= -2;
        }
        if (Math.abs(moveVelocity) > 10) {
          moveVelocity /= 10 | 0;
        }
        platform.move(moveVelocity);
      }
      return this.stage.update();
    };

    return Level;

  })();

}).call(this);
